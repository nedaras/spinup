const std = @import("std");
const fs = std.fs;
const path = fs.path;
const Watcher = @import("Watcher.zig");

pub fn executeCommand(allocator: std.mem.Allocator, command: []const []const u8) !void {
    var child = std.ChildProcess.init(command, allocator);
    _ = try child.spawnAndWait();
}

pub fn callback(watcher: *Watcher, absolute_path: []const u8, event: Watcher.Event) void {
    if (!event.is_dir) {
        executeCommand(watcher.allocator, &.{ "echo", "hello world!!!" }) catch |err| {
            std.debug.print("Could not run command, returned with error: {}\n", .{err});
        };
    }
    if (event.is_dir and event.type == .create) {
        // TODO: we sould handle errors.
        watcher.addDir(absolute_path) catch unreachable;
    }
}

const Config = struct {
    include: []const []const u8,
    exclude: []const []const u8,
    run: []const []const u8,
};

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();

    const allocator = gpa.allocator();

    std.debug.print("start\n", .{});
    const config = try fs.cwd().openFile("spinup.config.json", .{});
    defer config.close();

    var reader = std.json.reader(allocator, config.reader().any()); // use br
    defer reader.deinit();

    const parsed = try std.json.parseFromTokenSource(Config, allocator, &reader, .{});
    defer parsed.deinit();

    std.debug.print("{}\n", .{parsed.value});

    // Prints to stderr (it's a shortcut based on `std.io.getStdErr()`)
    std.debug.print("All your {s} are belong to us.\n", .{"codebase"});

    // stdout is for the actual output of your application, for example if you
    // are implementing gzip, then only the compressed bytes should be sent to
    // stdout, not any debugging messages.
    const stdout_file = std.io.getStdOut().writer();
    var bw = std.io.bufferedWriter(stdout_file);
    const stdout = bw.writer();

    try stdout.print("Run `zig build test` to run the tests.\n", .{});

    try bw.flush(); // don't forget to flush!

    var watcher = try Watcher.init(allocator);
    defer watcher.deinit();

    // TODO: we need to add like 1 second delay in callback to know when to reload
    try watcher.addDir("src");
    try watcher.run(callback);
}

test "simple test" {
    var list = std.ArrayList(i32).init(std.testing.allocator);
    defer list.deinit(); // try commenting this out and see if zig detects the memory leak!
    try list.append(42);
    try std.testing.expectEqual(@as(i32, 42), list.pop());
}
